// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewParseMsisdnParams creates a new ParseMsisdnParams object
// no default values defined in spec.
func NewParseMsisdnParams() ParseMsisdnParams {

	return ParseMsisdnParams{}
}

// ParseMsisdnParams contains all the bound params for the parse msisdn operation
// typically these are obtained from a http.Request
//
// swagger:parameters parseMsisdn
type ParseMsisdnParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: formData
	*/
	Msisdn string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewParseMsisdnParams() beforehand.
func (o *ParseMsisdnParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdMsisdn, fdhkMsisdn, _ := fds.GetOK("msisdn")
	if err := o.bindMsisdn(fdMsisdn, fdhkMsisdn, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindMsisdn binds and validates parameter Msisdn from formData.
func (o *ParseMsisdnParams) bindMsisdn(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("msisdn", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("msisdn", "formData", raw); err != nil {
		return err
	}

	o.Msisdn = raw

	return nil
}
